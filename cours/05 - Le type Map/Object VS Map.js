/* Quelles diff√©rences : Object VS Map ? */

// Histoire (avant / apr√®s ES6)
// Le type Map et les m√©thodes Object.keys(), Object.values() et Object.entries()
// ont √©t√© cr√©√©s dans la version ES6

// M√™mes cl√©s et valeurs...
let donnees = [
  ['s','v-s'], ['a','v-a'], ['c','v-c'], // "sac"
  ['bebe','v-bebe'], ['adulte','v-adulte'], // "bebe" => "adulte"
  ['11','v-11'], ['1','v-1'], ['2','v-2'], ['12','v-12'] // 11 1 2 12
];
let objet = {};
let map = new Map();
// Dans le m√™me ordre d'insertion...
for (let [cle, valeur] of donnees) {
  objet[cle] = valeur;
  map.set(cle, valeur);
}

// Ordre des cl√©s : non sp√©cifi√© avant ES6
console.log("\n-- Ordre des cl√©s");
// ‚ùå Ordre complexe (nombres croissants puis strings & symboles dans l'ordre d'insertion)
console.log(Object.entries(objet));
// ‚úÖ Ordre d'insertion
console.log(Array.from(map.entries()));

// Lecture de la taille du dictionnaire
console.log("\n-- Taille du dictionnaire");
console.log("Object:", Object.keys(objet).length);
console.log("Map:", map.size);

// It√©ration sur les cl√©s / valeurs
// ‚ùå Il faut r√©cup√©rer les cl√©s / valeurs avant
console.log("\n-- It√©ration sur les couples");
for (let [cle, valeur] of Object.entries(objet)) {
  console.log("Object:", cle, valeur);
}
// ‚úÖ Map est it√©rable : on it√®re dessus directement
for (let [cle, valeur] of map) {
  console.log("Map:", cle, valeur);
}

// Cl√©s accidentelles (cha√Æne de prototype)
console.log("\n-- Cl√©s accidentelles");
let chaine = "Phrase constructor toString valueOf fin";
let compteurObjet = {};
let compteurMap = new Map();
for (let mot of chaine.split(' ')) {
  if (compteurObjet[mot] !== undefined) compteurObjet[mot]++;
  else compteurObjet[mot] = 1;
  if (compteurMap.has(mot)) compteurMap.set(mot, compteurMap.get(mot) + 1);
  else compteurMap.set(mot, 1);
}
// ‚ùå Object contient des propri√©t√©s h√©rit√©es (conflits)
console.log(compteurObjet);
// ‚úÖ Map ne contient que ce qu'on lui ajoute
console.log(compteurMap);

// Type des cl√©s
console.log("\n-- Type des cl√©s");
// ‚ùå Object est limit√© aux cha√Ænes
let jeremy = { prenom: "J√©r√©my", statut: "admin" };
let tom = { prenom: "Tom", statut: "dev" };
let identifiantsObjet = {};
identifiantsObjet[jeremy] = 42;
identifiantsObjet[tom] = 1337;
console.log(identifiantsObjet);
// ‚úÖ Map peut avoir des cl√©s de n'importe quel type (objets, tableaux, sets etc.)
let identifiantsMap = new Map();
identifiantsMap.set(jeremy, 42);
identifiantsMap.set(tom, 1337);
console.log(identifiantsMap);

// üö® NOTE IMPORTANTE : objet en cl√© === R√©f√©rence !
console.log("\n-- Attention aux r√©f√©rences !");
let personne = { prenom: "J√©r√©my", statut: "admin" };
console.log("jeremy: ", jeremy);
console.log("personne: ", personne);
console.log(identifiantsMap.get(jeremy));
console.log(identifiantsMap.get(personne));

// ‚úÖ Map est optimis√© pour les ajouts/suppressions fr√©quentes et les gros volumes

// Ce qu'il faut retenir est SIMPLE : pr√©f√©rez l'utilisation du type Map au lieu d'Object quand vous devez utiliser un dictionnaire !