/* Les structures de donn√©es non lin√©aires : le type Map */

// Cr√©ation d'un dictionnaire vide
console.log("-- Cr√©ation d'un dictionnaire vide");
let identite = new Map();
console.log(identite);

// Ajout d'une nouvelle association avec set()
console.log("\n-- Ajout d'une nouvelle association");
console.log('‚úÖ avec .set()');
identite.set("prenom", "J√©r√©my");
identite.set("age", 36);
identite.set("developpeur", true);
// üö® ERREUR FREQUENTE
console.log('‚ùå identite.nombre = 42 ou identite["nombre"] = 42');
identite.nombre = 42;
console.log(identite);

// Lecture d'une valeur par sa cl√© avec get()
console.log("\n-- Lecture d'une valeur par sa cl√©");
console.log('‚úÖ avec .get() =>', identite.get("prenom"));
// üö® ERREUR FREQUENTE
console.log('‚ùå identite.prenom ou identite["prenom"] =>', identite.prenom);

// Modification d'une valeur par sa cl√© avec set()
console.log("\n-- Modification d'une valeur");
console.log("Age avant :", identite.get("age"));
console.log('‚úÖ avec .set("age", 42)');
identite.set("age", 42);
console.log('‚úÖ Age apr√®s : identite.get("age") =>', identite.get("age"));
// üö® ERREUR FREQUENTE
console.log('‚ùå Age apr√®s : identite.age ou identite["age"] =>', identite.age);

// Suppression d'une association avec delete()
console.log("\n-- Suppression de la cl√© age");
// üö® ERREUR FREQUENTE
console.log("‚ùå delete identite.age");
delete identite.age;
console.log(identite);
console.log('‚úÖ avec .delete()');
identite.delete("age");
console.log(identite);

// Parcourir les associations avec for...of
console.log("\n-- Parcourir les associations");
console.log("‚úÖ avec for...of");
for (let paire of identite) {
  console.log(paire);
}
// üö® ERREUR FREQUENTE
console.log("‚ùå avec for...in");
for (let propriete in identite) {
  console.log(propriete);
}

// R√©cup√©rer toutes les cl√©s dans un tableau
console.log("\n-- R√©cup√©rer les cl√©s dans un tableau");
console.log("‚úÖ avec .keys()");
console.log("It√©rateur sur les cl√©s :", identite.keys());
console.log("Transformation en tableau de cl√©s :", Array.from(identite.keys()));
console.log("‚ùå avec Object.keys()");
console.log("Tableau des propri√©t√©s :", Object.keys(identite));


// R√©cup√©rer toutes les valeurs dans un tableau
console.log("\n-- R√©cup√©rer les valeurs dans un tableau");
console.log("‚úÖ avec .values()");
console.log("It√©rateur sur les valeurs des cl√©s :", identite.values());
console.log("Transformation en tableau des valeurs des cl√©s :", Array.from(identite.values()));
console.log("‚ùå avec Object.values()");
console.log("Tableau des valeurs des propri√©t√©s :", Object.values(identite));

// R√©cup√©rer tous les couples cl√© -> valeur
console.log("\n-- R√©cup√©rer les couples cl√© -> valeur");
console.log("‚úÖ avec .entries()");
console.log("It√©rateur sur les couples cl√© -> valeur :", identite.entries());
let tableauCouples = Array.from(identite.entries());
console.log("Transformation en tableau des couples cl√© -> valeur :", tableauCouples);
console.log("Contenu de ce tableau :");
for (let couple of tableauCouples) {
  console.log(couple);
}
console.log("‚ùå avec Object.entries()");
let entries = Object.entries(identite);
console.log("Tableau des couples propri√©t√© -> valeur :", entries);
console.log("Contenu de ce tableau :");
for (let couple of entries) {
  console.log(couple);
}

/* Ce qu'il faut retenir */
// Utilisez TOUJOURS les m√©thodes de l'objet Map !
// ‚úÖ .get() .set() .delete() .has() .keys() .values() .entries()
// ‚ùå Object.keys(), Object.values(), Object.entries(), delete

// Point important : .keys(), .values() et .entries() renvoient un it√©rateur
// Pour le transformer en tableau : Array.from(it√©rateur)

// On peut aussi utiliser directement les it√©rateurs avec des boucles for...of
console.log("\n-- It√©rer sur les it√©rateurs avec for...of");
console.log("Liste des cl√©s : for...of identite.keys()");
for (let cle of identite.keys()) {
  console.log(cle);
}

console.log("\nListe des valeurs : for...of identite.values()");
for (let valeur of identite.values()) {
  console.log(valeur);
}

console.log("\nListe des couples : for...of identite.entries()");
for (let couples of identite.entries()) {
  console.log(couples);
}

// Lisez la doc du MDN sur Map pour en savoir plus :
// https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Global_Objects/Map

/* Quelles diff√©rences : Object VS Map ? */
// Ce sera l'objet de la prochaine le√ßon üòÅ